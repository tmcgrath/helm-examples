## Overriding values for Chart's values.yaml
## Example values to run Confluent Operator in Pivotal PKS
global:
  provider:
    name: private
    ## if any name which indicates regions
    ##
    region: anyregion
    kubernetes:
       deployment:
         ## If kubernetes is deployed in multi zone mode then specify availability-zones as appropriate
         ## If kubernetes is deployed in single availability zone then specify appropriate values
         ## For the private cloud, use kubernetes node labels as appropriate
         zones:
          - myzones
    storage:
      ##  more information can be found here
      ##  https://kubernetes.io/docs/concepts/storage/storage-classes/
      reclaimPolicy: Delete
      provisioner: kubernetes.io/gce-pd 
      parameters:
        type: pd-standard
    ##
    ## Docker registry endpoint where Confluent Images are available.
    ##
    registry:
      fqdn: docker.io
      credential:
        required: false

  sasl:
    plain:
      username: test
      password: test123

## Zookeeper cluster
##
zookeeper:
  name: zookeeper
  replicas: 3
  resources:
    cpu: 200m
    memory: 512Mi

## Kafka Cluster
##
kafka:
  name: kafka
  replicas: 3
  resources:
    cpu: 200m
    memory: 1Gi
  loadBalancer:
    enabled: true
    domain: "supergloo.com"
  tls:
    enabled: false
    fullchain: |-
    privkey: |-
    cacerts: |-

## Connect Cluster
##
connect:
  name: connectors
  replicas: 2
  tls:
    enabled: false
    fullchain: |-
    privkey: |-
    cacerts: |-
  loadBalancer:
    enabled: false
    domain: ""
  dependencies:
    kafka:
      bootstrapEndpoint: kafka:9071
      brokerCount: 3
## Replicator Connect Cluster
##
replicator:
  name: replicator
  replicas: 2
  tls:
    enabled: false
    fullchain: |-
    privkey: |-
    cacerts: |-
  loadBalancer:
    enabled: false
    domain: ""
  dependencies:
    kafka:
      brokerCount: 3
      bootstrapEndpoint: kafka:9071
##
## Schema Registry
##
schemaregistry:
  name: schemaregistry
  tls:
    enabled: false
    fullchain: |-
    privkey: |-
    cacerts: |-
  loadBalancer:
    enabled: true
    domain: "supergloo.com"
  dependencies:
    kafka:
      brokerCount: 3
      bootstrapEndpoint: kafka:9071

##
## KSQL
##
ksql:
  name: ksql
  replicas: 2
  tls:
    enabled: false
    fullchain: |-
    privkey: |-
    cacerts: |-
  basicAuth:
    enabled: false
    user: ""
    password: ""
  loadBalancer:
    enabled: false
    domain: ""
  dependencies:
    kafka:
      brokerCount: 3
      bootstrapEndpoint: kafka:9071
      brokerEndpoints: kafka-0.kafka.operator.svc.cluster.local:9071,kafka-1.kafka.operator.svc.cluster.local:9071,kafka-2.kafka.operator.svc.cluster.local:9071
    schemaregistry:
      enabled: false
      endpoint: ""
      tls: false

## Control Center (C3) Resource configuration
##
controlcenter:
  name: controlcenter
  license: ""
  ##
  ## C3 dependencies
  ##
  dependencies:
    c3KafkaCluster:
      brokerCount: 3
      bootstrapEndpoint: kafka:9071
      zookeeper:
        endpoint: zookeeper:2181
    connectCluster:
      enabled: true
      endpoints: connectors:8083
    ksql:
      enabled: false
      url: ""
    schemaregistry:
      enabled: true
      url: http://schemaregistry:8081
  ##
  ## C3 External Access
  ##
  loadBalancer:
    enabled: false
    domain: ""
  ##
  ## TLS configuration
  ##
  tls:
    enabled: false
    fullchain: |-
    privkey: |-
    cacerts: |-
  ##
  ## C3 authentication
  ##
  auth:
    basic:
      enabled: true
      ##
      ## map with key as user and value as password and role
      property:
        admin: Developer1,Administrators
        disallowed: no_access
